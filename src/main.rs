mod json_schema;

use log::info;
use dotenv::dotenv;

use reqwest::{Client, Error};
use reqwest::header::{HeaderMap, USER_AGENT, HeaderValue, CONTENT_TYPE, HeaderName, ACCEPT};

fn construct_headers(api_key: Option<&str>) -> HeaderMap {

    let mut headers: HeaderMap = HeaderMap::new();
    headers.insert(USER_AGENT, HeaderValue::from_static("reqwest"));
    headers.insert(CONTENT_TYPE, HeaderValue::from_static("application/json"));
    headers.insert(ACCEPT, HeaderValue::from_static("application/json"));
    match api_key {
        Some(api_key_value) => {
            headers.insert(HeaderName::from_static("apikey"), 
                        HeaderValue::from_str(&api_key_value).unwrap());
        },
        None => ()
    }
    headers
}

async fn get_response(url: String, api_key: Option<&str>) -> Result<json_schema::CveRoot, Error>{
    let response = Client::new()
        .get(url)
        .headers(construct_headers(api_key))
        .send()
        .await
        .unwrap();
    
    match response.status() {
        reqwest::StatusCode::OK => {
            let json_future = response.json::<json_schema::CveRoot>();
            match json_future.await {
                Ok(json_response) => return Ok(json_response),
                Err(e) => {
                    info!("Json parse error: {e}");
                    return Err(e);
                }
            }
        },
        reqwest::StatusCode::BAD_REQUEST => info!("Bad request"),
        reqwest::StatusCode::GATEWAY_TIMEOUT => info!("Timeout"),
        reqwest::StatusCode::BAD_GATEWAY => info!("Bad gateway"),
        reqwest::StatusCode::SERVICE_UNAVAILABLE => info!("Service unavailable"),
        _ => info!("Something wrong: {}", response.status()),
    }
    Err(response.error_for_status().err().unwrap())
}


#[tokio::main]
async fn main() -> Result<(), Error> {
    dotenv().ok();
    let nist_api_token = option_env!("NIST_API_TOKEN");
    let url = format!("https://services.nvd.nist.gov/rest/json/cves/2.0/?resultsPerPage=1&startIndex=1");

    let json_resp: json_schema::CveRoot = get_response(url, nist_api_token).await?;
    println!("{:#?}", json_resp);

    Ok(())
}
