mod json_schema;
use reqwest::{Client, Error};
use reqwest::header::{HeaderMap, HeaderName, USER_AGENT, HeaderValue, CONTENT_TYPE};

fn construct_headers() -> HeaderMap {
    let mut headers = HeaderMap::new();
    headers.insert(USER_AGENT, HeaderValue::from_static("reqwest"));
    headers.insert(CONTENT_TYPE, HeaderValue::from_static("application/json"));
    headers.insert(HeaderName::from_static("apiKey"), HeaderValue::from_static("afdd899d-6fd3-41ea-a7d3-c668b589479c"));
    headers
}

#[tokio::main]
async fn main() -> Result<(), Error> {
    let url = format!("https://services.nvd.nist.gov/rest/json/cves/2.0/?resultsPerPage=1&startIndex=1");

    let response = Client::new()
        .get(url)
        // .headers(construct_headers())
        .send()
        .await
        .unwrap();
    
    match response.status() {
        reqwest::StatusCode::OK => {
            let json_future = response.json::<json_schema::CveRoot>();
            match json_future.await {
                Ok(json_response) => println!("{:#?}", json_response),
                Err(e) => {
                    println!("Json parse error: {e}");
                    return Err(e);
                }
            }
        },
        reqwest::StatusCode::BAD_REQUEST => println!("Bad request happened"),
        reqwest::StatusCode::GATEWAY_TIMEOUT => println!("Timeout"),
        reqwest::StatusCode::BAD_GATEWAY => println!("Bad gateway"),
        reqwest::StatusCode::SERVICE_UNAVAILABLE => println!("Service unavailable"),
        _ => println!("Something wrong: {}", response.status()),
    }

    Ok(())
}
