
use serde::{Serialize, Deserialize};

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct CveRoot {
    results_per_page: i64,
    start_index: i64,
    total_results: i64,
    format: String,
    version: String,
    timestamp: String,
    vulnerabilities: Vec<Vulnerability>,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct Vulnerability {
    cve: Cve,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
#[serde(default)]
pub struct Cve {
    id: String,
    source_identifier: String,
    published: String,
    last_modified: String,
    vuln_status: String,
    descriptions: Vec<Description>,
    metrics: Metrics,
    weaknesses: Vec<Weakness>,
    configurations: Vec<Configuration>,
    references: Vec<Reference>,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct Configuration {
    nodes: Vec<Node>,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct Node {
    operator: String,
    negate: bool,
    cpe_match: Vec<CpeMatch>,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct CpeMatch {
    vulnerable: bool,
    criteria: String,
    match_criteria_id: String,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct Description {
    lang: String,
    value: String,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
#[serde(default)]
pub struct Metrics {
    pub cvss_metric_v2: Vec<CvssMetricV2>,
    pub cvss_metric_v31: Vec<CvssMetricV31>,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct CvssMetricV2 {
    source: String,

    #[serde(rename = "type")]
    cvss_metric_v2_type: String,
    
    cvss_data: CvssData,
    base_severity: String,
    exploitability_score: f64,
    impact_score: f64,
    ac_insuf_info: bool,
    obtain_all_privilege: bool,
    obtain_user_privilege: bool,
    obtain_other_privilege: bool,
    user_interaction_required: bool,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct CvssMetricV31 {
    pub source: String,
    #[serde(rename = "type")]
    pub type_field: String,
    pub cvss_data: CvssData,
    pub exploitability_score: f64,
    pub impact_score: f64,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
#[serde(default)]
pub struct CvssData {
    pub version: String,
    pub vector_string: String,
    pub attack_vector: String,
    pub access_vector: String,
    pub access_complexity: String,
    pub authentication: String,
    pub attack_complexity: String,
    pub privileges_required: String,
    pub user_interaction: String,
    pub scope: String,
    pub confidentiality_impact: String,
    pub integrity_impact: String,
    pub availability_impact: String,
    pub base_score: f64,
    pub base_severity: String,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct Reference {
    url: String,
    source: String,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct Weakness {
    source: String,
    #[serde(rename = "type")]
    weakness_type: String,
    description: Vec<Description>,
}